-- MySQL Script generated by MySQL Workbench
-- Fri 31 Aug 2018 02:01:42 PM EDT
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema nmu
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `nmu` ;

-- -----------------------------------------------------
-- Schema nmu
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `nmu` DEFAULT CHARACTER SET utf8 ;
USE `nmu` ;

-- -----------------------------------------------------
-- Table `nmu`.`Wholesaler`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `nmu`.`Wholesaler` (
  `wholesaler_id` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(500) NOT NULL,
  `phone` VARCHAR(45) NULL,
  `email` VARCHAR(45) NULL,
  `description` VARCHAR(1000) NULL,
  `region` VARCHAR(45) NULL,
  `business_type` VARCHAR(45) NULL,
  `wholesaler_code` VARCHAR(45) NULL,
  `contact_person` VARCHAR(45) NULL,
  `contact_person_phone` VARCHAR(45) NULL,
  PRIMARY KEY (`wholesaler_id`),
  UNIQUE INDEX `wholesaler_code_UNIQUE` (`wholesaler_code` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `nmu`.`Department`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `nmu`.`Department` (
  `department_id` INT NOT NULL AUTO_INCREMENT,
  `department_name` VARCHAR(45) NOT NULL,
  `description` VARCHAR(1000) NULL,
  PRIMARY KEY (`department_id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `nmu`.`TravelAgency`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `nmu`.`TravelAgency` (
  `ta_id` INT NOT NULL AUTO_INCREMENT,
  `agency_name` VARCHAR(100) NOT NULL,
  `description` VARCHAR(1000) NULL,
  `email` VARCHAR(500) NULL,
  `phone` VARCHAR(45) NULL,
  `active_status` ENUM('Y', 'N') NOT NULL DEFAULT 'Y',
  `create_time` DATETIME NOT NULL,
  `address` VARCHAR(1000) NULL,
  `zipcode` VARCHAR(45) NULL,
  `country` VARCHAR(45) NULL,
  PRIMARY KEY (`ta_id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `nmu`.`Salesperson`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `nmu`.`Salesperson` (
  `salesperson_id` INT NOT NULL AUTO_INCREMENT,
  `fname` VARCHAR(45) NOT NULL,
  `lname` VARCHAR(45) NULL,
  `salesperson_code` VARCHAR(45) NULL,
  `department_id` INT NOT NULL,
  `phone` VARCHAR(45) NULL,
  `email` VARCHAR(45) NULL,
  `description` VARCHAR(500) NULL,
  `gender` ENUM('M', 'F', 'UNKNOWN') NOT NULL,
  `active_status` ENUM('Y', 'N') NOT NULL DEFAULT 'Y',
  `ta_id` INT NULL,
  PRIMARY KEY (`salesperson_id`),
  INDEX `fk_dep_id_idx` (`department_id` ASC),
  INDEX `fk_s_ta_id_idx` (`ta_id` ASC),
  CONSTRAINT `fk_dep_id`
    FOREIGN KEY (`department_id`)
    REFERENCES `nmu`.`Department` (`department_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_s_ta_id`
    FOREIGN KEY (`ta_id`)
    REFERENCES `nmu`.`TravelAgency` (`ta_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `nmu`.`TouristGuide`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `nmu`.`TouristGuide` (
  `guide_id` INT NOT NULL AUTO_INCREMENT,
  `fname` VARCHAR(45) NOT NULL,
  `lname` VARCHAR(45) NULL,
  `email` VARCHAR(45) NULL,
  `phone` VARCHAR(45) NOT NULL,
  `other_contact_type` ENUM('wechat', 'QQ', 'facebook') NULL,
  `other_contact_number` VARCHAR(50) NULL,
  `gender` ENUM('M', 'F', 'UNKNOWN') NOT NULL,
  `descriptions` VARCHAR(500) NULL,
  `age` INT NULL,
  PRIMARY KEY (`guide_id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `nmu`.`CouponCode`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `nmu`.`CouponCode` (
  `cc_id` INT NOT NULL AUTO_INCREMENT,
  `code` VARCHAR(100) NOT NULL,
  `discount` DECIMAL(11,2) NOT NULL,
  `code_expired` ENUM('Y', 'N') NOT NULL COMMENT 'Y/N',
  `salesperson_id` INT NULL,
  `description` VARCHAR(500) NULL,
  `currency` ENUM('RMB', 'USD') NULL DEFAULT 'USD',
  PRIMARY KEY (`cc_id`),
  UNIQUE INDEX `code_UNIQUE` (`code` ASC),
  INDEX `cc_fk_salesperson_id_idx` (`salesperson_id` ASC),
  CONSTRAINT `cc_fk_salesperson_id`
    FOREIGN KEY (`salesperson_id`)
    REFERENCES `nmu`.`Salesperson` (`salesperson_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `nmu`.`GroupTour`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `nmu`.`GroupTour` (
  `group_tour_id` INT NOT NULL AUTO_INCREMENT,
  `group_code` VARCHAR(45) NULL,
  `salesperson_id` INT NOT NULL,
  `start_date` DATETIME NOT NULL,
  `end_date` DATETIME NOT NULL,
  `duration` INT NOT NULL,
  `flight_number` VARCHAR(100) NULL,
  `bus_company` VARCHAR(5000) NULL,
  `reserve_currency` ENUM('USD', 'RMB') NULL DEFAULT 'USD',
  `reserve` DECIMAL(11,2) NOT NULL,
  `total_cost_currency` ENUM('USD', 'RMB') NULL DEFAULT 'USD',
  `total_cost` DECIMAL(11,2) NOT NULL,
  `leader_number` INT NOT NULL,
  `tourist_number` INT NOT NULL,
  `wholesaler_id` INT NULL,
  `exchange_rate_usd_rmb` DECIMAL(11,2) NULL,
  `received` VARCHAR(45) NULL DEFAULT 0,
  `received_currency` ENUM('USD', 'RMB') NULL DEFAULT 'USD',
  `cc_id` INT NULL,
  `coupon` DECIMAL(11,2) NULL DEFAULT 0,
  `coupon_currency` ENUM('USD', 'RMB') NULL DEFAULT 'USD',
  `group_tour_invoice` VARCHAR(100) NULL DEFAULT '',
  `total_write_off` DECIMAL(11,2) NULL DEFAULT 0,
  `total_write_off_currency` ENUM('USD', 'RMB') NULL DEFAULT 'USD',
  `commission_fee` DECIMAL(11,2) NULL DEFAULT 0,
  `shin_received` DECIMAL(11,2) NULL,
  PRIMARY KEY (`group_tour_id`),
  UNIQUE INDEX `tour_id_UNIQUE` (`group_tour_id` ASC),
  INDEX `fk_salesperson_id_idx` (`salesperson_id` ASC),
  INDEX `fk_wholesaler_id_gt_idx` (`wholesaler_id` ASC),
  INDEX `gt_cc_id_idx` (`cc_id` ASC))
ENGINE = BLACKHOLE;


-- -----------------------------------------------------
-- Table `nmu`.`IndividualTour`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `nmu`.`IndividualTour` (
  `indiv_tour_id` INT NOT NULL AUTO_INCREMENT,
  `wholesaler_id` INT NULL,
  `salesperson_id` INT NULL,
  `indiv_number` INT NULL,
  `depart_date` DATETIME NULL,
  `arrival_date` DATETIME NULL,
  `product_code` VARCHAR(45) NOT NULL,
  `tour_name` VARCHAR(500) NULL,
  `exchange_rate` DECIMAL(11,2) NULL,
  `sale_price` DECIMAL(11,2) NULL DEFAULT 0,
  `sale_currency` ENUM('USD', 'RMB') NULL DEFAULT 'USD',
  `base_price` DECIMAL(11,2) NULL DEFAULT 0,
  `base_currency` ENUM('USD', 'RMB') NULL DEFAULT 'USD',
  `coupon` DECIMAL(11,2) NULL DEFAULT 0,
  `coupon_currency` ENUM('USD', 'RMB') NULL,
  `indiv_tour_invoice` VARCHAR(100) NULL DEFAULT '',
  PRIMARY KEY (`indiv_tour_id`),
  INDEX `fk_wholesaler_id_idx` (`wholesaler_id` ASC),
  INDEX `fk_salesperson_id_idx` (`salesperson_id` ASC),
  CONSTRAINT `fk_wholesaler_id`
    FOREIGN KEY (`wholesaler_id`)
    REFERENCES `nmu`.`Wholesaler` (`wholesaler_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `it_salesperson_id`
    FOREIGN KEY (`salesperson_id`)
    REFERENCES `nmu`.`Salesperson` (`salesperson_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `nmu`.`Customer`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `nmu`.`Customer` (
  `customer_id` INT NOT NULL AUTO_INCREMENT,
  `fname` VARCHAR(45) NULL,
  `lname` VARCHAR(45) NULL,
  `email` VARCHAR(45) NULL,
  `phone` VARCHAR(45) NULL,
  `other_contact_type` VARCHAR(45) NULL,
  `other_contact_number` VARCHAR(45) NULL,
  `birth_date` DATETIME NULL,
  `gender` ENUM('M', 'F', 'UNKNOWN') NULL,
  `zipcode` VARCHAR(45) NULL,
  PRIMARY KEY (`customer_id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `nmu`.`AirticketTour`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `nmu`.`AirticketTour` (
  `airticket_tour_id` INT NOT NULL AUTO_INCREMENT,
  `salesperson_id` INT NOT NULL,
  `customer_id` INT NOT NULL,
  `flight_code` VARCHAR(45) NULL,
  `locators` VARCHAR(10) NOT NULL,
  `ticket_type` ENUM('group', 'individual') NULL,
  `round_trip` ENUM('round', 'oneway') NULL,
  `adult_number` INT NOT NULL DEFAULT 0,
  `child_number` INT NOT NULL DEFAULT 0,
  `infant_number` INT NOT NULL DEFAULT 0,
  `refunded` ENUM('Y', 'N') NOT NULL DEFAULT 'N',
  `passenger_name` VARCHAR(500) NULL,
  `itinerary` VARCHAR(5000) NULL,
  `invoice` VARCHAR(45) NOT NULL,
  `ta_id` INT NULL DEFAULT 1,
  `exchange_rate_usd_rmb` DECIMAL(11,2) NULL,
  `base_price` DECIMAL(11,2) NULL,
  `base_currency` ENUM('USD', 'RMB') NULL,
  `sale_price` DECIMAL(11,2) NULL,
  `sale_currency` ENUM('USD', 'RMB') NULL,
  `received2` DECIMAL(11,2) NULL,
  `received2_currency` ENUM('USD', 'RMB') NULL DEFAULT 'USD',
  `cc_id` INT NULL,
  `coupon` DECIMAL(11,2) NULL DEFAULT 0,
  `coupon_currency` ENUM('USD', 'RMB') NULL,
  `wholesaler_id` INT NULL,
  `received` DECIMAL(11,2) NULL,
  `commission_fee` DECIMAL(11,2) NULL DEFAULT 0,
  PRIMARY KEY (`airticket_tour_id`),
  INDEX `fk_salesperson_id_idx` (`salesperson_id` ASC),
  INDEX `fk_customer_id_idx` (`customer_id` ASC),
  INDEX `at_ta_id_idx` (`ta_id` ASC),
  INDEX `at_cc_id_idx` (`cc_id` ASC),
  INDEX `at_wholesaler_id_idx` (`wholesaler_id` ASC),
  CONSTRAINT `at_salesperson_id`
    FOREIGN KEY (`salesperson_id`)
    REFERENCES `nmu`.`Salesperson` (`salesperson_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `at_customer_id`
    FOREIGN KEY (`customer_id`)
    REFERENCES `nmu`.`Customer` (`customer_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `at_ta_id`
    FOREIGN KEY (`ta_id`)
    REFERENCES `nmu`.`TravelAgency` (`ta_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `at_cc_id`
    FOREIGN KEY (`cc_id`)
    REFERENCES `nmu`.`CouponCode` (`cc_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `at_wholesaler_id`
    FOREIGN KEY (`wholesaler_id`)
    REFERENCES `nmu`.`Wholesaler` (`wholesaler_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `nmu`.`CustomerSource`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `nmu`.`CustomerSource` (
  `source_id` INT NOT NULL AUTO_INCREMENT,
  `source_name` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`source_id`),
  UNIQUE INDEX `sourse_name_UNIQUE` (`source_name` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `nmu`.`UserGroup`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `nmu`.`UserGroup` (
  `user_group_id` INT NOT NULL,
  `group_name` VARCHAR(45) NOT NULL,
  `description` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`user_group_id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `nmu`.`UserAccount`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `nmu`.`UserAccount` (
  `user_id` INT NOT NULL AUTO_INCREMENT,
  `account_id` VARCHAR(8) NOT NULL,
  `password` VARCHAR(500) NOT NULL,
  `user_group_id` INT NOT NULL,
  `last_time_login` DATETIME NULL,
  PRIMARY KEY (`user_id`),
  INDEX `fk_group_id_idx` (`user_group_id` ASC),
  UNIQUE INDEX `account_id_UNIQUE` (`account_id` ASC),
  CONSTRAINT `fk_user_group_id_ua`
    FOREIGN KEY (`user_group_id`)
    REFERENCES `nmu`.`UserGroup` (`user_group_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `nmu`.`NoticeBoard`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `nmu`.`NoticeBoard` (
  `notice_id` INT NOT NULL AUTO_INCREMENT,
  `valid_until` DATETIME NOT NULL,
  `edited_by` INT NOT NULL,
  `content` VARCHAR(1000) NULL,
  `gotop` ENUM('Y', 'N') NULL DEFAULT 'N',
  `category` VARCHAR(45) NULL,
  PRIMARY KEY (`notice_id`),
  INDEX `fk_user_id_nb_idx` (`edited_by` ASC),
  CONSTRAINT `fk_user_id_nb`
    FOREIGN KEY (`edited_by`)
    REFERENCES `nmu`.`UserAccount` (`user_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `nmu`.`TourDetails`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `nmu`.`TourDetails` (
  `indiv_collection_id` INT NOT NULL AUTO_INCREMENT,
  `customer_id` INT NOT NULL,
  `indiv_tour_id` INT NOT NULL,
  `join_date` DATETIME NULL,
  `leave_date` DATETIME NULL,
  `join_location` VARCHAR(45) NULL,
  `leave_location` VARCHAR(45) NULL,
  `note` VARCHAR(500) NULL,
  `payment_amount_currency` ENUM('USD', 'RMB') NULL DEFAULT 'USD',
  `payment_type` ENUM('creditcard', 'mco', 'alipay', 'wechat', 'cash', 'check', 'other', 'remit') NULL,
  `payment_amount` DECIMAL(11,2) NULL DEFAULT 0,
  `clear_status` ENUM('Y', 'N') NOT NULL DEFAULT 'N',
  `lock_status` ENUM('Y', 'N') NOT NULL DEFAULT 'N',
  `cc_id` INT NULL,
  `coupon_currency` ENUM('USD', 'RMB') NULL DEFAULT 'USD',
  `coupon` DECIMAL(11,2) NULL DEFAULT 0,
  `mco_id` INT NULL,
  `commission_fee` DECIMAL(11,2) NULL DEFAULT 0,
  `received` DECIMAL(11,2) NULL,
  PRIMARY KEY (`indiv_collection_id`),
  INDEX `fk_customer_id_idx` (`customer_id` ASC),
  INDEX `fk_indiv_tour_id_idx` (`indiv_tour_id` ASC),
  INDEX `fk_cc_id_idx` (`cc_id` ASC),
  INDEX `it_mco_id_idx` (`mco_id` ASC),
  CONSTRAINT `ind_customer_id`
    FOREIGN KEY (`customer_id`)
    REFERENCES `nmu`.`Customer` (`customer_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_indiv_tour_id`
    FOREIGN KEY (`indiv_tour_id`)
    REFERENCES `nmu`.`IndividualTour` (`indiv_tour_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_cc_id_td`
    FOREIGN KEY (`cc_id`)
    REFERENCES `nmu`.`CouponCode` (`cc_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `it_mco_id`
    FOREIGN KEY (`mco_id`)
    REFERENCES `nmu`.`McoInfo` (`mco_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = big5
COLLATE = big5_bin;


-- -----------------------------------------------------
-- Table `nmu`.`McoInfo`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `nmu`.`McoInfo` (
  `mco_id` INT NOT NULL AUTO_INCREMENT,
  `cardholder` VARCHAR(45) NULL,
  `card_number` VARCHAR(45) NULL,
  `exp_date` VARCHAR(4) NULL,
  `security_code` INT(3) NULL,
  `billing_address` VARCHAR(1000) NULL,
  `phone_issuing_bank` VARCHAR(45) NULL,
  `charging_amount_currency` VARCHAR(45) NULL,
  `charging_amount` VARCHAR(45) NULL,
  `notice_id` INT NULL,
  `transaction_id` INT NULL,
  `indiv_collection_id` INT NULL,
  PRIMARY KEY (`mco_id`),
  INDEX `fk_McoInfo_notice_id_idx` (`notice_id` ASC),
  INDEX `fk_mco_transaction_id_idx` (`transaction_id` ASC),
  INDEX `fk_mco_indiv_coll_id_idx` (`indiv_collection_id` ASC),
  CONSTRAINT `fk_McoInfo_notice_id`
    FOREIGN KEY (`notice_id`)
    REFERENCES `nmu`.`NoticeBoard` (`notice_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_mco_transaction_id`
    FOREIGN KEY (`transaction_id`)
    REFERENCES `nmu`.`Transactions` (`transaction_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_mco_indiv_coll_id`
    FOREIGN KEY (`indiv_collection_id`)
    REFERENCES `nmu`.`TourDetails` (`indiv_collection_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `nmu`.`Transactions`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `nmu`.`Transactions` (
  `transaction_id` INT NOT NULL AUTO_INCREMENT,
  `type` ENUM('airticket', 'group', 'individual') NOT NULL,
  `group_tour_id` INT NULL,
  `indiv_tour_id` INT NULL,
  `airticket_tour_id` INT NULL,
  `create_time` DATETIME NOT NULL,
  `settle_time` DATETIME NULL,
  `salesperson_id` INT NULL,
  `currency` ENUM('USD', 'RMB') NULL DEFAULT 'USD',
  `expense` DECIMAL(11,2) NOT NULL DEFAULT 0,
  `received` DECIMAL(11,2) NOT NULL DEFAULT 0,
  `coupon` DECIMAL(11,2) NULL DEFAULT 0,
  `payment_type` ENUM('creditcard', 'mco', 'alipay', 'wechat', 'cash', 'check', 'other', 'multiple', 'remit') NOT NULL DEFAULT 'multiple',
  `total_profit` DECIMAL(11,2) NOT NULL DEFAULT 0,
  `source_id` INT NULL DEFAULT 1,
  `lock_status` ENUM('Y', 'N') NOT NULL,
  `clear_status` ENUM('Y', 'N') NOT NULL,
  `note` VARCHAR(1000) NULL,
  `mco_id` INT NULL,
  PRIMARY KEY (`transaction_id`),
  UNIQUE INDEX `transaction_id_UNIQUE` (`transaction_id` ASC),
  INDEX `fk_salesperson_id_idx` (`salesperson_id` ASC),
  INDEX `fk_indiv_id_idx` (`indiv_tour_id` ASC),
  INDEX `fk_airticket_id_idx` (`airticket_tour_id` ASC),
  INDEX `fk_source_id_idx` (`source_id` ASC),
  UNIQUE INDEX `group_tour_id_UNIQUE` (`group_tour_id` ASC),
  UNIQUE INDEX `indiv_tour_id_UNIQUE` (`indiv_tour_id` ASC),
  UNIQUE INDEX `airticket_tour_id_UNIQUE` (`airticket_tour_id` ASC),
  INDEX `t_mco_id_idx` (`mco_id` ASC),
  CONSTRAINT `tr_salesperson_id`
    FOREIGN KEY (`salesperson_id`)
    REFERENCES `nmu`.`Salesperson` (`salesperson_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_indiv_id`
    FOREIGN KEY (`indiv_tour_id`)
    REFERENCES `nmu`.`IndividualTour` (`indiv_tour_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_airticket_id`
    FOREIGN KEY (`airticket_tour_id`)
    REFERENCES `nmu`.`AirticketTour` (`airticket_tour_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_source_id`
    FOREIGN KEY (`source_id`)
    REFERENCES `nmu`.`CustomerSource` (`source_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_group_id`
    FOREIGN KEY (`group_tour_id`)
    REFERENCES `nmu`.`GroupTour` (`group_tour_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `t_mco_id`
    FOREIGN KEY (`mco_id`)
    REFERENCES `nmu`.`McoInfo` (`mco_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `nmu`.`OtherInfo`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `nmu`.`OtherInfo` (
  `info_id` INT NOT NULL AUTO_INCREMENT,
  `type` VARCHAR(45) NULL,
  `name` VARCHAR(45) NULL,
  `value` VARCHAR(45) NULL,
  PRIMARY KEY (`info_id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `nmu`.`QuestionBoard`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `nmu`.`QuestionBoard` (
  `question_id` INT NOT NULL AUTO_INCREMENT,
  `question_title` VARCHAR(1000) NOT NULL,
  `question_time` DATETIME NULL,
  `ask_salesperson_id` INT NULL,
  `answer_content` VARCHAR(1000) NULL,
  `question_status` ENUM('solved', 'pending') NOT NULL DEFAULT 'pending',
  `question_content` VARCHAR(5000) NULL,
  `ta_id` INT NULL,
  PRIMARY KEY (`question_id`),
  INDEX `fk_ask_salesperson_id_idx` (`ask_salesperson_id` ASC),
  INDEX `fk_qb_ta_id_idx` (`ta_id` ASC),
  CONSTRAINT `fk_ask_salesperson_id`
    FOREIGN KEY (`ask_salesperson_id`)
    REFERENCES `nmu`.`Salesperson` (`salesperson_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_qb_ta_id`
    FOREIGN KEY (`ta_id`)
    REFERENCES `nmu`.`TravelAgency` (`ta_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `nmu`.`AirSchedule`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `nmu`.`AirSchedule` (
  `as_id` INT NOT NULL AUTO_INCREMENT,
  `airticket_tour_id` INT NOT NULL,
  `depart_airport` VARCHAR(45) NULL,
  `arrival_airport` VARCHAR(45) NULL,
  `depart_date` DATETIME NULL,
  `flight_number` VARCHAR(45) NULL,
  PRIMARY KEY (`as_id`),
  INDEX `fk_as_airticket_tour_id_idx` (`airticket_tour_id` ASC),
  CONSTRAINT `fk_as_airticket_tour_id`
    FOREIGN KEY (`airticket_tour_id`)
    REFERENCES `nmu`.`AirticketTour` (`airticket_tour_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `nmu`.`AirScheduleIntegrated`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `nmu`.`AirScheduleIntegrated` (
  `as_integrated_id` INT NOT NULL AUTO_INCREMENT,
  `all_schedule` VARCHAR(500) NULL,
  `airticket_tour_id` INT NULL,
  PRIMARY KEY (`as_integrated_id`),
  INDEX `fk_asi_at_id_idx` (`airticket_tour_id` ASC),
  CONSTRAINT `fk_asi_at_id`
    FOREIGN KEY (`airticket_tour_id`)
    REFERENCES `nmu`.`AirticketTour` (`airticket_tour_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `nmu`.`ThingsToDo`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `nmu`.`ThingsToDo` (
  `tto_id` INT NOT NULL AUTO_INCREMENT,
  `create_time` DATETIME NOT NULL,
  `content` VARCHAR(500) NULL,
  `user_id` INT NULL,
  `importance` ENUM('highlight', 'normal') NULL DEFAULT 'normal',
  `type` ENUM('calendar', 'notice') NULL,
  `title` VARCHAR(45) NULL,
  PRIMARY KEY (`tto_id`),
  INDEX `fk_user_id_tto_idx` (`user_id` ASC),
  CONSTRAINT `fk_user_id_tto`
    FOREIGN KEY (`user_id`)
    REFERENCES `nmu`.`UserAccount` (`user_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `nmu`.`FrequentWords`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `nmu`.`FrequentWords` (
  `title_id` INT NOT NULL AUTO_INCREMENT,
  `words` VARCHAR(1000) NOT NULL,
  `user_id` INT NOT NULL,
  PRIMARY KEY (`title_id`),
  INDEX `fk_fw_user_id_idx` (`user_id` ASC),
  CONSTRAINT `fk_fw_user_id`
    FOREIGN KEY (`user_id`)
    REFERENCES `nmu`.`UserAccount` (`user_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `nmu`.`GroupTourGuideDetails`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `nmu`.`GroupTourGuideDetails` (
  `gd_id` INT NOT NULL AUTO_INCREMENT,
  `guide_id` INT NOT NULL,
  `group_tour_id` INT NOT NULL,
  `write_off` DECIMAL(11,2) NOT NULL,
  `write_off_currency` ENUM('USD', 'RMB') NULL DEFAULT 'USD',
  PRIMARY KEY (`gd_id`),
  INDEX `fk_group_tour_id_gtg_idx` (`group_tour_id` ASC),
  INDEX `fk_tour_guide_gtg_idx` (`guide_id` ASC),
  CONSTRAINT `fk_group_tour_id_gtg`
    FOREIGN KEY (`group_tour_id`)
    REFERENCES `nmu`.`GroupTour` (`group_tour_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_tour_guide_gtg`
    FOREIGN KEY (`guide_id`)
    REFERENCES `nmu`.`TouristGuide` (`guide_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `nmu`.`GroupTourReceived`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `nmu`.`GroupTourReceived` (
  `gtr_id` INT NOT NULL AUTO_INCREMENT,
  `group_tour_id` INT NOT NULL,
  `received` VARCHAR(45) NULL DEFAULT 0,
  `received_currency` ENUM('USD', 'RMB') NULL DEFAULT 'USD',
  PRIMARY KEY (`gtr_id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `nmu`.`UpdateLog`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `nmu`.`UpdateLog` (
  `log_id` INT NOT NULL AUTO_INCREMENT,
  `transaction_id` INT NULL,
  `name` VARCHAR(45) NULL,
  `value_before` DECIMAL(11,2) NULL,
  `value_after` DECIMAL(11,2) NULL,
  `value_difference` DECIMAL(11,2) NULL,
  `currency_before` ENUM('USD', 'RMB') NULL,
  `currency_after` ENUM('USD', 'RMB') NULL,
  `revised_by` INT NULL,
  `revised_time` DATETIME NULL,
  PRIMARY KEY (`log_id`),
  INDEX `ul_fk_transaction_id_idx` (`transaction_id` ASC),
  INDEX `ul_fk_user_id_idx` (`revised_by` ASC),
  CONSTRAINT `ul_fk_transaction_id`
    FOREIGN KEY (`transaction_id`)
    REFERENCES `nmu`.`Transactions` (`transaction_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `ul_fk_user_id`
    FOREIGN KEY (`revised_by`)
    REFERENCES `nmu`.`UserAccount` (`user_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `nmu`.`NoticeTarget`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `nmu`.`NoticeTarget` (
  `nt_id` INT NOT NULL AUTO_INCREMENT,
  `notice_id` INT NULL,
  `target_id` INT NULL,
  PRIMARY KEY (`nt_id`),
  INDEX `fk_nt_notice_id_idx` (`notice_id` ASC),
  INDEX `fk_nt_target_id_idx` (`target_id` ASC),
  CONSTRAINT `fk_nt_notice_id`
    FOREIGN KEY (`notice_id`)
    REFERENCES `nmu`.`NoticeBoard` (`notice_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_nt_target_id`
    FOREIGN KEY (`target_id`)
    REFERENCES `nmu`.`UserAccount` (`user_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

USE `nmu` ;

-- -----------------------------------------------------
-- procedure insertOneRow
-- -----------------------------------------------------

DELIMITER $$
USE `nmu`$$
CREATE PROCEDURE insertOneRow(
IN 
    fromDate DATETIME,
    fromDate_format VARCHAR(45),
    endDate DATETIME,
    endDate_format VARCHAR(45),
    s_code VARCHAR(45),
    d_currency DECIMAL(11,2),
    table_name VARCHAR(45),
    middle_part ENUM('Y', 'N'),
    frequency ENUM('daily', 'monthly', 'seasonly', 'hyearly', 'yearly')
)
    BEGIN
    IF frequency = 'yearly' THEN
        IF middle_part = 'Y' THEN
            SELECT DATE_FORMAT(fromDate, '%Y') INTO @time_period;
        ELSE
            SELECT concat(DATE_FORMAT(fromDate, fromDate_format), '-', DATE_FORMAT(endDate, endDate_format)) INTO @time_period;
        END IF;    
    ELSEIF frequency = 'monthly' THEN
        IF middle_part = 'Y' THEN
            SELECT DATE_FORMAT(fromDate, '%Y-%m') INTO @time_period;
        ELSE 
            SELECT concat(DATE_FORMAT(fromDate, fromDate_format), '-', DATE_FORMAT(endDate, endDate_format)) INTO @time_period;
        END IF;
    ELSEIF frequency = 'daily' THEN
        SELECT DATE_FORMAT(fromDate, '%Y-%m-%d') INTO @time_period;
    ELSEIF frequency = 'seasonly' OR frequency = 'hyearly' THEN
        IF middle_part = 'N' THEN
        SELECT concat(DATE_FORMAT(fromDate, fromDate_format), '-', DATE_FORMAT(endDate, endDate_format)) INTO @time_period;
        ELSE
        SELECT concat(DATE_FORMAT(fromDate, fromDate_format), '-', DATE_FORMAT(concat(DATE_FORMAT(endDate, '%Y-%m'), '-01')-interval 1 month, '%Y-%m')) INTO @time_period;
        END IF;
    ELSEIF frequency = 'yearly' THEN
        IF middle_part = 'N' THEN
            SELECT concat(DATE_FORMAT(fromDate, fromDate_format), '-', DATE_FORMAT(endDate, endDate_format)) INTO @time_period;
        ELSE 
            SELECT DATE_FORMAT(fromDate, '%Y') INTO @time_period;
        END IF;
    END IF;
    SELECT ROUND(IFNULL((SELECT sum(profit) FROM GroupTourOrder 
    WHERE create_time < endDate 
    AND create_time >= fromDate
    AND salesperson_code LIKE s_code
    AND currency = 'USD'), 0) + IFNULL((SELECT sum(profit) FROM GroupTourOrder 
    WHERE create_time < endDate 
    AND create_time >= fromDate
    AND salesperson_code LIKE s_code
    AND currency = 'RMB'), 0)/d_currency, 2) INTO @groupSum;
    SELECT ROUND(IFNULL((SELECT sum(total_profit) FROM IndividualTourOrder 
    WHERE create_time < endDate 
    AND create_time >= fromDate
    AND salesperson_code LIKE s_code
    AND currency = 'USD'), 0) + IFNULL((SELECT sum(total_profit) FROM IndividualTourOrder 
    WHERE create_time < endDate 
    AND create_time >= fromDate
    AND salesperson_code LIKE s_code
    AND currency = 'RMB'), 0)/d_currency, 2) INTO @indivSum;
    SELECT ROUND(IFNULL((SELECT sum(total_profit) FROM AirticketTourOrder 
    WHERE create_time < endDate 
    AND create_time >= fromDate
    AND salesperson_code LIKE s_code
    AND currency = 'USD'), 0) + IFNULL((SELECT sum(total_profit) FROM AirticketTourOrder 
    WHERE create_time < endDate 
    AND create_time >= fromDate
    AND salesperson_code LIKE s_code
    AND currency = 'RMB'), 0)/d_currency, 2) INTO @airSum;
    SET @insertIntoTable = concat('INSERT INTO ', table_name, ' VALUES(@time_period, @groupSum, @indivSum, @airSum,  @groupSum+@indivSum+@airSum);');
    PREPARE forExecute FROM @insertIntoTable;
    EXECUTE forExecute;
    DEALLOCATE PREPARE forExecute;
    END;$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sum_profit
-- -----------------------------------------------------

DELIMITER $$
USE `nmu`$$
CREATE PROCEDURE sum_profit
(IN
    frequency VARCHAR(10), 
    s_code VARCHAR(50), 
    from_date DATETIME, 
    to_date DATETIME
) 
BEGIN 
    SELECT value FROM OtherInfo WHERE name = 'default_currency' INTO @default_currency;
    DROP TABLE IF EXISTS forCalculate;
    CREATE TEMPORARY TABLE forCalculate (
        time_period VARCHAR(45),
        groupSum DECIMAL(11,2),
        indivSum DECIMAL(11,2),
        airSum DECIMAL(11,2),
        totalSum DECIMAL(11,2)
    );
    IF frequency = 'monthly' THEN
        IF from_date > DATE_FORMAT(to_date, '%Y-%m') THEN 
            CALL insertOneRow(from_date, '%Y-%m-%d', to_date+interval 1 day, '%Y-%m-%d', s_code, @default_currency, 'forCalculate', 'N', 'monthly');
            SELECT * FROM forCalculate;
        ELSE
            CALL insertOneRow(concat(DATE_FORMAT(to_date, '%Y-%m'), '-01'), '%Y-%m', to_date+interval 1 day, '%Y-%m-%d', s_code, @default_currency, 'forCalculate', 'N', 'monthly');
            SET @cursor_day = to_date - interval 1 month;
            WHILE from_date < DATE_FORMAT(@cursor_day, '%Y-%m') DO
                CALL insertOneRow(concat(DATE_FORMAT(@cursor_day, '%Y-%m'), '-01'), 'hello', concat(DATE_FORMAT(@cursor_day + interval 1 month, '%Y-%m'), '-01'), 'world', s_code, @default_currency, 'forCalculate', 'Y', 'monthly');
                SET @cursor_day = @cursor_day - interval 1 month;
            END WHILE;
            SET @last_month = DATE_FORMAT(@cursor_day + interval 1 month, '%Y-%m');
            CALL insertOneRow(from_date, '%Y-%m-%d', concat(@last_month, '-01'), '%Y-%m', s_code, @default_currency, 'forCalculate', 'N', 'monthly');
            SELECT * FROM forCalculate;
        END IF;
    ELSEIF frequency = 'daily' THEN 
        SET @cursor_day = to_date;
        WHILE @cursor_day >= from_date DO
            CALL insertOneRow(@cursor_day, '%Y-%m-%d', @cursor_day + interval 1 day, '%Y-%m-%d', s_code, @default_currency, 'forCalculate', 'N', 'daily');
            SET @cursor_day = @cursor_day - interval 1 day;
        END WHILE;
        SELECT * FROM forCalculate;
    ELSEIF frequency = 'seasonly' THEN
        IF from_date > DATE_FORMAT(to_date - interval 3 month, '%Y-%m') THEN
            CALL insertOneRow(from_date, '%Y-%m-%d', to_date+interval 1 day, '%Y-%m-%d', s_code, @default_currency, 'forCalculate', 'N', 'seasonly');
        ELSE
            CALL insertOneRow(concat(DATE_FORMAT(to_date - interval 2 month, '%Y-%m'), '-01'), '%Y-%m', to_date+interval 1 day, '%Y-%m-%d', s_code, @default_currency, 'forCalculate', 'N', 'seasonly');
            SET @cursor_day = to_date - interval 2 month;
            WHILE from_date < DATE_FORMAT(@cursor_day - interval 3 month, '%Y-%m') DO
                CALL insertOneRow(concat(DATE_FORMAT(@cursor_day - interval 3 month, '%Y-%m'), '-01'), '%Y-%m', concat(DATE_FORMAT(@cursor_day, '%Y-%m'), '-01'), '%Y-%m', s_code, @default_currency, 'forCalculate', 'Y', 'seasonly');
                SET @cursor_day = @cursor_day - interval 3 month;
            END WHILE;
            CALL insertOneRow(from_date, '%Y-%m-%d', concat(DATE_FORMAT(@cursor_day, '%Y-%m'), '-01'), '%Y-%m', s_code, @default_currency, 'forCalculate', 'Y', 'seasonly');
        END IF;
        SELECT * FROM forCalculate;
    ELSEIF frequency = 'hyearly' THEN
        IF from_date > DATE_FORMAT(to_date-interval 6 month, '%Y-%m') THEN
            CALL insertOneRow(from_date, '%Y-%m-%d', to_date+interval 1 day, '%Y-%m-%d', s_code, @default_currency, 'forCalculate', 'N', 'hyearly');
        ELSE
            CALL insertOneRow(concat(DATE_FORMAT(to_date - interval 5 month, '%Y-%m'), '-01'), '%Y-%m', to_date+interval 1 day, '%Y-%m-%d', s_code, @default_currency, 'forCalculate', 'N', 'hyearly');
            SET @cursor_day = to_date - interval 5 month;
            WHILE from_date < DATE_FORMAT(@cursor_day - interval 6 month, '%Y-%m') DO
                CALL insertOneRow(concat(DATE_FORMAT(@cursor_day - interval 6 month, '%Y-%m'), '-01'), '%Y-%m', concat(DATE_FORMAT(@cursor_day, '%Y-%m'), '-01'), '%Y-%m', s_code, @default_currency, 'forCalculate', 'Y', 'hyearly');
                SET @cursor_day = @cursor_day - interval 6 month;
            END WHILE;
            CALL insertOneRow(from_date, '%Y-%m-%d', concat(DATE_FORMAT(@cursor_day, '%Y-%m'), '-01'), '%Y-%m', s_code, @default_currency, 'forCalculate', 'Y', 'hyearly');
        END IF;
        SELECT * FROM forCalculate;
    ELSEIF frequency = 'yearly' THEN
        IF from_date >= DATE_FORMAT(to_date-interval 12 month, '%Y-%m') THEN
            CALL insertOneRow(from_date, '%Y-%m-%d', to_date+interval 1 day, '%Y-%m-%d', s_code, @default_currency, 'forCalculate', 'N', 'yearly');
        ELSE 
            CALL insertOneRow(concat(DATE_FORMAT(to_date, '%Y'), '-01-01'), '%Y', to_date+interval 1 day, '%Y-%m-%d', s_code, @default_currency, 'forCalculate', 'N', 'yearly');
            SET @cursor_day = to_date - interval 12 month;
            WHILE from_date < DATE_FORMAT(@cursor_day, '%Y') DO
                CALL insertOneRow(concat(DATE_FORMAT(@cursor_day, '%Y'), '-01-01'), 'hello', concat(DATE_FORMAT(@cursor_day+interval 12 month, '%Y'), '-01-01'), 'world', s_code, @default_currency, 'forCalculate', 'Y', 'yearly');
                SET @cursor_day = @cursor_day - interval 12 month;
            END WHILE;
            CALL insertOneRow(from_date, '%Y-%m-%d', concat(DATE_FORMAT(@cursor_day+interval 12 month, '%Y'), '-01-01'), '%Y', s_code, @default_currency, 'forCalculate', 'N', 'yearly');
        END IF;
        SELECT * FROM forCalculate;
    END IF;
    DROP TABLE forCalculate;
END;$$

DELIMITER ;
USE `nmu`;

DELIMITER $$
USE `nmu`$$
CREATE TRIGGER updateGroupTour BEFORE UPDATE ON GroupTour 
FOR EACH ROW
BEGIN
SELECT 
    received, 
    currency, 
    expense, 
    coupon 
FROM Transactions WHERE group_tour_id = NEW.group_tour_id INTO 
    @t_received, 
    @t_currency, 
    @expense, 
    @t_coupon;
SET 
    @exchange_rate = OLD.exchange_rate_usd_rmb;


IF @t_received <> NEW.shin_received THEN
    IF @t_currency = NEW.received_currency THEN 
        UPDATE Transactions SET received = NEW.shin_received, total_profit = received - expense - coupon  WHERE group_tour_id = NEW.group_tour_id;
    ELSE 
        IF @t_currency = 'RMB' THEN 
            UPDATE Transactions SET currency = 'USD', received = NEW.shin_received, expense = expense / @exchange_rate, coupon = coupon / @exchange_rate, total_profit = received - expense - coupon WHERE group_tour_id = NEW.group_tour_id;
        END IF;
        IF NEW.received_currency = 'RMB' THEN 
            UPDATE Transactions SET received = NEW.shin_received / @exchange_rate, total_profit = received - expense - coupon  WHERE group_tour_id = NEW.group_tour_id;
        END IF;
    END IF;
ELSE 
    IF @t_currency <> NEW.received_currency THEN 
        IF @t_currency = 'RMB' THEN 
            UPDATE Transactions SET currency = 'USD', received = NEW.shin_received, expense = expense / @exchange_rate, coupon = coupon / @exchange_rate, total_profit = received - expense - coupon WHERE group_tour_id = NEW.group_tour_id;
        END IF;
        IF NEW.received_currency = 'RMB' THEN 
            UPDATE Transactions SET received = NEW.shin_received / @exchange_rate, total_profit = received - expense - coupon  WHERE group_tour_id = NEW.group_tour_id;
        END IF;
    END IF;
END IF;
IF @expense <> NEW.total_cost THEN
    IF @t_currency = NEW.total_cost_currency THEN 
        UPDATE Transactions SET expense = NEW.total_cost, total_profit = received - expense - coupon  WHERE group_tour_id = NEW.group_tour_id;
    ELSE 
        IF @t_currency = 'RMB' THEN 
            UPDATE Transactions SET currency = 'USD', expense = NEW.total_cost, received = received / @exchange_rate, coupon = coupon / @exchange_rate, total_profit = received - expense - coupon WHERE group_tour_id = NEW.group_tour_id;
        END IF;
        IF NEW.total_cost_currency = 'RMB' THEN 
            UPDATE Transactions SET expense = NEW.total_cost / @exchange_rate, total_profit = received - expense - coupon  WHERE group_tour_id = NEW.group_tour_id;
        END IF;
    END IF;
ELSE 
    IF @t_currency <> NEW.total_cost_currency THEN 
        IF @t_currency = 'RMB' THEN 
            UPDATE Transactions SET currency = 'USD', expense = NEW.total_cost, received = received / @exchange_rate, coupon = coupon / @exchange_rate, total_profit = received - expense - coupon WHERE group_tour_id = NEW.group_tour_id;
        END IF;
        IF NEW.total_cost_currency = 'RMB' THEN 
            UPDATE Transactions SET expense = NEW.total_cost / @exchange_rate, total_profit = received - expense - coupon  WHERE group_tour_id = NEW.group_tour_id;
        END IF;
    END IF;
END IF;
IF @t_coupon <> NEW.coupon THEN
    IF @t_currency = NEW.coupon_currency THEN 
        UPDATE Transactions SET coupon = NEW.coupon, total_profit = received - expense - coupon  WHERE group_tour_id = NEW.group_tour_id;
    ELSE 
        IF @t_currency = 'RMB' THEN 
            UPDATE Transactions SET currency = 'USD', coupon = NEW.coupon, expense = expense / @exchange_rate, received = received / @exchange_rate, total_profit = received - expense - coupon WHERE group_tour_id = NEW.group_tour_id;
        END IF;
        IF NEW.coupon_currency = 'RMB' THEN 
            UPDATE Transactions SET coupon = NEW.coupon / @exchange_rate, total_profit = received - expense - coupon  WHERE group_tour_id = NEW.group_tour_id;
        END IF;
    END IF;
ELSE 
    IF @t_currency <> NEW.coupon_currency THEN 
        IF @t_currency = 'RMB' THEN 
            UPDATE Transactions SET currency = 'USD', coupon = NEW.coupon, expense = expense / @exchange_rate, received = received / @exchange_rate, total_profit = received - expense - coupon WHERE group_tour_id = NEW.group_tour_id;
        END IF;
        IF NEW.coupon_currency = 'RMB' THEN 
            UPDATE Transactions SET coupon = NEW.coupon / @exchange_rate, total_profit = received - expense - coupon  WHERE group_tour_id = NEW.group_tour_id;
        END IF;
    END IF;
END IF;
END$$

USE `nmu`$$
CREATE TRIGGER updateIndividualTour AFTER UPDATE ON IndividualTour 
FOR EACH ROW
BEGIN
SET @indiv_tour_id = NEW.indiv_tour_id;
SET @new_base_price = IFNULL(NEW.base_price, 0);
SET @new_sale_price = IFNULL(NEW.sale_price, 0);
SET @new_coupon = IFNULL(NEW.coupon, 0);

SET @new_base_currency = IFNULL(NEW.base_currency, OLD.base_currency);
SET @new_sale_currency = IFNULL(NEW.sale_currency, OLD.sale_currency);
SET @new_coupon_currency = IFNULL(NEW.coupon_currency, OLD.coupon_currency);

SELECT currency FROM Transactions WHERE indiv_tour_id = @indiv_tour_id INTO @t_currency;
SET @t_currency = IFNULL(@t_currency, 'USD');


IF 'USD' NOT IN (@new_base_currency, @new_coupon_currency, @new_sale_currency) THEN  
    UPDATE Transactions SET currency = 'RMB' WHERE indiv_tour_id = @indiv_tour_id;
ELSE
    IF @new_base_currency = 'RMB' THEN 
        SET @new_base_price = @new_base_price / NEW.exchange_rate;
    END IF;
    IF @new_sale_currency = 'RMB' THEN 
        SET @new_sale_price = @new_sale_price / NEW.exchange_rate;
    END IF;
    IF @new_coupon_currency = 'RMB' THEN 
        SET @new_coupon = @new_coupon / NEW.exchange_rate;
    END IF;
    UPDATE Transactions SET currency = 'USD' WHERE indiv_tour_id = @indiv_tour_id;
END IF;
UPDATE Transactions SET
    expense = @new_base_price, 
    received = @new_sale_price,
    coupon = @new_coupon,
    total_profit = received - expense - coupon
WHERE indiv_tour_id = @indiv_tour_id;
END$$

USE `nmu`$$
CREATE TRIGGER cPAir_update AFTER UPDATE ON AirticketTour 
FOR EACH ROW
BEGIN
SET @airticket_tour_id = NEW.airticket_tour_id;
SET @new_base_price = IFNULL(NEW.base_price, 0);
SET @new_received = IFNULL(NEW.received, 0);
SET @new_received2 = IFNULL(NEW.received2, 0);
SET @new_coupon = IFNULL(NEW.coupon, 0);
SET @new_base_currency = IFNULL(NEW.base_currency, OLD.base_currency);
SET @new_sale_currency = IFNULL(NEW.sale_currency, OLD.sale_currency);
SET @new_received2_currency = IFNULL(NEW.received2_currency, OLD.sale_currency);
SET @new_coupon_currency = IFNULL(NEW.coupon_currency, OLD.coupon_currency);
SELECT currency FROM Transactions WHERE airticket_tour_id = @airticket_tour_id INTO @t_currency;
SET @t_currency = IFNULL(@t_currency, 'USD');
IF 'USD' NOT IN (@new_base_currency, @new_coupon_currency, @new_sale_currency, @new_received2_currency) THEN  
    UPDATE Transactions SET currency = 'RMB' WHERE airticket_tour_id = @airticket_tour_id;
ELSE
    IF @new_base_currency = 'RMB' THEN 
        SET @new_base_price = @new_base_price / NEW.exchange_rate_usd_rmb;
    END IF;
    IF @new_sale_currency = 'RMB' THEN 
        SET @new_received = @new_received/ NEW.exchange_rate_usd_rmb;
    END IF;
    IF @new_received2_currency = 'RMB' THEN 
        SET @new_received2 = @new_received2 / NEW.exchange_rate_usd_rmb;
    END IF;
    IF @new_coupon_currency = 'RMB' THEN 
        SET @new_coupon = @new_coupon / NEW.exchange_rate_usd_rmb;
    END IF;
    UPDATE Transactions SET currency = 'USD' WHERE airticket_tour_id = @airticket_tour_id;
END IF;
UPDATE Transactions SET
    expense = @new_base_price, 
    received = @new_received + @new_received2,
    coupon = @new_coupon,
    total_profit = received - expense - coupon
WHERE airticket_tour_id = @airticket_tour_id;
END$$

USE `nmu`$$
CREATE TRIGGER addTourDetails AFTER INSERT ON TourDetails 
FOR EACH ROW 
BEGIN
SELECT 
    sale_price, 
    sale_currency, 
    exchange_rate, 
    coupon, 
    coupon_currency 
FROM IndividualTour WHERE indiv_tour_id = NEW.indiv_tour_id INTO 
    @sale_price, 
    @sale_currency, 
    @exchange_rate, 
    @it_coupon, 
    @it_coupon_currency;

SET 
    @td_coupon = NEW.coupon, 
    @sale_price = IFNULL(@sale_price, 0),
    @it_coupon = IFNULL(@it_coupon, 0),
    @received = NEW.received;

IF @sale_price = 0 THEN 
    UPDATE IndividualTour SET sale_currency = NEW.payment_amount_currency, sale_price = NEW.received WHERE indiv_tour_id = NEW.indiv_tour_id;
ELSE 
    IF @sale_currency = NEW.payment_amount_currency THEN
        UPDATE IndividualTour SET sale_price = sale_price + NEW.received WHERE indiv_tour_id = NEW.indiv_tour_id;
    ELSE 
        IF @sale_currency = 'RMB' THEN 
            SET @sale_price = @sale_price / @exchange_rate;
        END IF;
        IF NEW.payment_amount_currency = 'RMB' THEN
            SET @received = @received / @exchange_rate;
        END IF;
        UPDATE IndividualTour SET sale_price = @sale_price + @received, sale_currency = 'USD' WHERE indiv_tour_id = NEW.indiv_tour_id;
    END IF;
END IF;

IF @it_coupon = 0 THEN 
    IF NEW.coupon <> 0 THEN 
        UPDATE IndividualTour SET coupon_currency = NEW.coupon_currency, coupon = NEW.coupon WHERE indiv_tour_id = NEW.indiv_tour_id;
    ELSE 
        UPDATE IndividualTour SET coupon_currency = NEW.payment_amount_currency, coupon = 0 WHERE indiv_tour_id = NEW.indiv_tour_id;
    END IF;
ELSE 
    IF @it_coupon_currency = NEW.coupon_currency THEN
        UPDATE IndividualTour SET coupon = coupon + NEW.coupon WHERE indiv_tour_id = NEW.indiv_tour_id;
    ELSE 
        IF @it_coupon_currency = 'RMB' THEN 
            SET @it_coupon = @it_coupon / @exchange_rate;
        END IF;
        IF NEW.coupon_currency = 'RMB' THEN
            SET @td_coupon = @td_coupon / @exchange_rate;
        END IF;
        UPDATE IndividualTour SET coupon = @it_coupon + @td_coupon, coupon_currency = 'USD' WHERE indiv_tour_id = NEW.indiv_tour_id;
    END IF;
END IF;
SELECT count(DISTINCT payment_type) FROM TourDetails WHERE indiv_tour_id = NEW.indiv_tour_id INTO @payment_type_number;
IF @payment_type_number = 1 THEN
    SELECT DISTINCT payment_type FROM TourDetails WHERE indiv_tour_id = NEW.indiv_tour_id INTO @payment_type_one;
    UPDATE Transactions SET payment_type = @payment_type_one WHERE indiv_tour_id = NEW.indiv_tour_id;
ELSE
    UPDATE Transactions SET payment_type = 'multiple' WHERE indiv_tour_id = NEW.indiv_tour_id;
END IF;
END$$

USE `nmu`$$
CREATE TRIGGER updateTourDetails AFTER UPDATE ON TourDetails
FOR EACH ROW 
BEGIN
SELECT 
    sale_currency,
    exchange_rate,
    sale_price
FROM IndividualTour WHERE indiv_tour_id = NEW.indiv_tour_id INTO 
    @sale_currency,
    @exchange_rate,
    @sale_price;
SET 
    @new_received = NEW.received,
    @old_received = OLD.received;

IF @sale_currency = NEW.payment_amount_currency AND OLD.payment_amount_currency = @sale_currency THEN 
    UPDATE IndividualTour SET sale_price = sale_price - OLD.received + NEW.received WHERE indiv_tour_id = NEW.indiv_tour_id;
ELSE 
    IF @sale_currency = 'RMB' THEN 
        SET @sale_price = @sale_price / @exchange_rate;
    END IF;
    IF NEW.payment_amount_currency = 'RMB' THEN 
        SET @new_received = @new_received / @exchange_rate;
    END IF;
    IF OLD.payment_amount_currency = 'RMB' THEN 
        SET @old_received = @old_received / @exchange_rate;
    END IF;
    UPDATE IndividualTour SET sale_price = @sale_price - @old_received + @new_received, sale_currency = 'USD' WHERE indiv_tour_id = NEW.indiv_tour_id;
END IF;


SELECT 
    coupon_currency,
    coupon 
FROM IndividualTour WHERE indiv_tour_id = NEW.indiv_tour_id INTO 
    @coupon_currency,
    @coupon;
SET @new_coupon = NEW.coupon;
SET @old_coupon = OLD.coupon;

IF NEW.coupon <> 0 THEN
    IF NEW.coupon_currency = OLD.coupon_currency AND NEW.coupon_currency = @coupon_currency THEN
        UPDATE IndividualTour SET coupon = coupon - OLD.coupon + NEW.coupon WHERE indiv_tour_id = NEW.indiv_tour_id;
    ELSE 
        IF @coupon_currency = 'RMB' THEN 
            SET @coupon = @coupon / @exchange_rate;
        END IF;
        IF NEW.coupon_currency = 'RMB' THEN 
            SET @new_coupon = @new_coupon / @exchange_rate;
        END IF;
        IF OLD.coupon_currency = 'RMB' THEN 
            SET @old_coupon = @old_coupon / @exchange_rate;
        END IF;
        UPDATE IndividualTour SET coupon = @coupon - @old_coupon + @new_coupon, coupon_currency = 'USD' WHERE indiv_tour_id = NEW.indiv_tour_id;
    END IF;
ELSE 
    IF OLD.coupon <> 0 THEN 
        IF OLD.coupon_currency = @coupon_currency THEN 
            UPDATE IndividualTour SET coupon = coupon - OLD.coupon WHERE indiv_tour_id = NEW.indiv_tour_id;
        ELSE 
            IF @coupon_currency = 'RMB' THEN 
                SET @coupon = @coupon / @exchange_rate;
            END IF;
            IF OLD.coupon_currency = 'RMB' THEN 
                SET @old_coupon = @old_coupon / @exchange_rate;
            END IF;
            UPDATE IndividualTour SET coupon = @coupon - @old_coupon, coupon_currency = 'USD' WHERE indiv_tour_id = NEW.indiv_tour_id;
        END IF;
    END IF;
END IF;

SET @indiv_tour_id = NEW.indiv_tour_id;
SET @all_clear_status = 'N';
SET @all_lock_status = 'N';

SELECT count(DISTINCT clear_status) FROM TourDetails WHERE indiv_tour_id = @indiv_tour_id INTO @clear_status_number;
IF @clear_status_number = 1 THEN 
    SELECT DISTINCT clear_status FROM TourDetails WHERE indiv_tour_id = @indiv_tour_id INTO @all_clear_status;
END IF;
SELECT count(DISTINCT lock_status) FROM TourDetails WHERE indiv_tour_id = @indiv_tour_id INTO @lock_status_number;
IF @lock_status_number = 1 THEN 
    SELECT DISTINCT lock_status FROM TourDetails WHERE indiv_tour_id = @indiv_tour_id INTO @all_lock_status;
END IF;
IF @all_clear_status = 'Y' THEN
    UPDATE Transactions SET clear_status = 'Y' WHERE indiv_tour_id = @indiv_tour_id;
END IF;
IF @all_lock_status = 'Y' THEN
    UPDATE Transactions SET clear_status = 'Y', lock_status = 'Y' WHERE indiv_tour_id = @indiv_tour_id;
END IF;

SELECT count(DISTINCT payment_type) FROM TourDetails WHERE indiv_tour_id = NEW.indiv_tour_id INTO @payment_type_number;
IF @payment_type_number = 1 THEN
    SELECT DISTINCT payment_type FROM TourDetails WHERE indiv_tour_id = NEW.indiv_tour_id INTO @payment_type_one;
    UPDATE Transactions SET payment_type = @payment_type_one WHERE indiv_tour_id = NEW.indiv_tour_id;
ELSE
    UPDATE Transactions SET payment_type = 'multiple' WHERE indiv_tour_id = NEW.indiv_tour_id;
END IF;
END$$

USE `nmu`$$
CREATE TRIGGER deleteTourDetails AFTER DELETE ON TourDetails 
FOR EACH ROW
BEGIN
SELECT exchange_rate FROM IndividualTour WHERE indiv_tour_id = OLD.indiv_tour_id INTO @exchange_rate;
IF OLD.payment_amount_currency = (SELECT sale_currency FROM IndividualTour WHERE indiv_tour_id = OLD.indiv_tour_id) THEN 
    UPDATE IndividualTour SET sale_price = sale_price - OLD.received WHERE indiv_tour_id = OLD.indiv_tour_id;
ELSE 
    UPDATE IndividualTour SET 
    sale_price = sale_price - OLD.received / @exchange_rate
    WHERE indiv_tour_id = OLD.indiv_tour_id;
END IF;

IF OLD.coupon_currency = (SELECT coupon_currency FROM IndividualTour WHERE indiv_tour_id = OLD.indiv_tour_id) THEN 
    UPDATE IndividualTour SET coupon = coupon - OLD.coupon WHERE indiv_tour_id = OLD.indiv_tour_id;
ELSE 
    UPDATE IndividualTour SET 
    coupon = coupon - OLD.coupon / @exchange_rate
    WHERE indiv_tour_id = OLD.indiv_tour_id;
END IF;

SELECT count(DISTINCT payment_type) FROM TourDetails WHERE indiv_tour_id = OLD.indiv_tour_id INTO @payment_type_number;
IF @payment_type_number = 1 THEN
    SELECT DISTINCT payment_type FROM TourDetails WHERE indiv_tour_id = OLD.indiv_tour_id INTO @payment_type_one;
    UPDATE Transactions SET payment_type = @payment_type_one WHERE indiv_tour_id = OLD.indiv_tour_id;
ELSE
    UPDATE Transactions SET payment_type = 'multiple' WHERE indiv_tour_id = OLD.indiv_tour_id;
END IF;
END$$

USE `nmu`$$
CREATE TRIGGER cp BEFORE INSERT ON Transactions 
FOR EACH ROW
BEGIN 
IF NEW.type = 'airticket' THEN
    SET @airticket_tour_id = NEW.airticket_tour_id;
    SELECT 
        base_price,
        base_currency,
        sale_price,
        received2,
        received2_currency,
        coupon,
        coupon_currency,
        exchange_rate_usd_rmb,
        commission_fee,
        received
    FROM AirticketTour WHERE airticket_tour_id = @airticket_tour_id INTO 
        @base_price,
        @base_currency,
        @sale_price,
        @sale_currency,
        @received2,
        @received2_currency,
        @coupon,
        @coupon_currency, 
        @exchange_rate_usd_rmb,
        @commission_fee,
        @received;

    IF @base_currency = @sale_currency AND @base_currency = @received2_currency AND @base_currency = @coupon_currency THEN    
        SET 
            NEW.expense = IFNULL(@base_price, 0), 
            NEW.received = IFNULL(@received, 0) + IFNULL(@received2, 0), 
            NEW.currency = @base_currency, 
            NEW.coupon = IFNULL(@coupon, 0),
            NEW.total_profit = NEW.received - NEW.expense - NEW.coupon;
    ELSE
        IF @base_currency = 'RMB' THEN 
            SET @base_price = @base_price / @exchange_rate_usd_rmb;
            SET @base_currency = 'USD';
        END IF;
        IF @sale_currency = 'RMB' THEN 
            SET 
                @commission_fee = @commission_fee / @exchange_rate_usd_rmb,
                @sale_price = @sale_price / @exchange_rate_usd_rmb,
                @received = @sale_price - @commission_fee;
            SET @sale_currency = 'USD';
        END IF;
        IF @received2_currency = 'RMB' THEN 
            SET @received2 = @received2 / @exchange_rate_usd_rmb;
            SET @received2_currency = 'USD';
        END IF;
        IF @coupon_currency = 'RMB' THEN
            SET @coupon = @coupon / @exchange_rate_usd_rmb;
            SET @coupon_currency = 'USD';
        END IF;
        SET 
            NEW.expense = IFNULL(@base_price, 0), 
            NEW.received = IFNULL(@received, 0) + IFNULL(@received2, 0), 
            NEW.currency = @base_currency, 
            NEW.coupon = IFNULL(@coupon, 0),
            NEW.total_profit = NEW.received - NEW.expense - NEW.coupon;
    END IF;
END IF;
IF NEW.type = 'individual' THEN
    SELECT sale_price FROM IndividualTour WHERE indiv_tour_id = NEW.indiv_tour_id INTO @sale_price;
    SELECT base_price FROM IndividualTour WHERE indiv_tour_id = NEW.indiv_tour_id INTO @base_price;
    SELECT coupon FROM IndividualTour WHERE indiv_tour_id = NEW.indiv_tour_id INTO @coupon;
    SELECT sale_currency FROM IndividualTour WHERE indiv_tour_id = NEW.indiv_tour_id INTO @sale_currency;
    SELECT base_currency FROM IndividualTour WHERE indiv_tour_id = NEW.indiv_tour_id INTO @base_currency;
    SELECT coupon_currency FROM IndividualTour WHERE indiv_tour_id = NEW.indiv_tour_id INTO @coupon_currency;
    SELECT exchange_rate FROM IndividualTour WHERE indiv_tour_id = NEW.indiv_tour_id INTO @exchange_rate_usd_rmb;
    IF @base_currency = @sale_currency AND @sale_currency = @coupon_currency THEN
        SET NEW.currency = @sale_currency;
        SET NEW.expense = IFNULL(@base_price, 0);
        SET NEW.received = IFNULL(@sale_price, 0);
        SET NEW.coupon = IFNULL(@coupon, 0);
        SET NEW.total_profit = NEW.received - NEW.expense - NEW.coupon;
    ELSE 
        IF @base_currency = 'RMB' THEN 
            SET @base_price = @base_price / @exchange_rate_usd_rmb;
            SET @base_currency = 'USD';
        END IF;
        IF @sale_currency = 'RMB' THEN 
            SET @sale_price = @sale_price / @exchange_rate_usd_rmb;
            SET @sale_currency = 'USD';
        END IF;
        IF @coupon_currency = 'RMB' THEN
            SET @coupon = @coupon / @exchange_rate_usd_rmb;
            SET @coupon_currency = 'USD';
        END IF;
        SET
            NEW.expense = IFNULL(@base_price, 0), 
            NEW.received = IFNULL(@sale_price, 0),
            NEW.currency = @base_currency, 
            NEW.coupon = IFNULL(@coupon, 0),
            NEW.total_profit = NEW.received - NEW.expense - NEW.coupon;
    END IF;
END IF;
IF NEW.type = 'group' THEN 
    SELECT 
        received,
        total_cost,
        coupon,
        received_currency,
        total_cost_currency,
        coupon_currency, 
        exchange_rate_usd_rmb,
        commission_fee,
        shin_received
    FROM GroupTour WHERE group_tour_id = NEW.group_tour_id INTO 
        @received,
        @total_cost,
        @coupon,
        @received_currency,
        @total_cost_currency,
        @coupon_currency,
        @exchange_rate_usd_rmb,
        @commission_fee,
        @shin_received;
    IF 'USD' IN (@received_currency, @total_cost_currency, @coupon_currency) AND 'RMB' IN (@received_currency, @total_cost_currency, @coupon_currency) THEN
        IF @received_currency = 'RMB' THEN 
            SET 
                @commission_fee = @commission_fee / @exchange_rate_usd_rmb,
                @received = @received / @exchange_rate_usd_rmb,
                @shin_received = @received - @commission_fee;
            SET @received_currency = 'USD';
        END IF;
        IF @total_cost_currency = 'RMB' THEN 
            SET @total_cost = @total_cost / @exchange_rate_usd_rmb;
            SET @total_xost_currency = 'USD';
        END IF;
        IF @received_currency = 'RMB' THEN 
            SET @coupon = @coupon / @exchange_rate_usd_rmb;
            SET @coupon_currency = 'USD';
        END IF;       
    END IF;
    SET NEW.received = IFNULL(@shin_received, 0);
    SET NEW.expense = IFNULL(@total_cost, 0);
    SET NEW.coupon = IFNULL(@coupon, 0);
    SET NEW.total_profit = NEW.received - NEW.expense - NEW.coupon;
    SET NEW.currency = @received_currency;
END IF;
END$$

USE `nmu`$$
CREATE TRIGGER updateLog BEFORE UPDATE ON Transactions
FOR EACH ROW
BEGIN
IF NEW.currency = OLD.currency THEN
    IF OLD.received <> NEW.received THEN 
        INSERT INTO UpdateLog(
            transaction_id, 
            name, 
            value_before,
            value_after, 
            value_difference, 
            currency_before, 
            currency_after,
            revised_time
        ) VALUES(
            NEW.transaction_id,
            'received',
            OLD.received,
            NEW.received,
            NEW.received - OLD.received,
            OLD.currency,
            NEW.currency, 
            current_timestamp
        );
    END IF;
    IF OLD.expense <> NEW.expense THEN 
        INSERT INTO UpdateLog(
            transaction_id, 
            name, 
            value_before,
            value_after, 
            value_difference, 
            currency_before, 
            currency_after,
            revised_time
        ) VALUES(
            NEW.transaction_id,
            'expense',
            OLD.expense,
            NEW.expense,
            NEW.expense - OLD.expense,
            OLD.currency,
            NEW.currency, 
            current_timestamp
        );
    END IF;
    IF OLD.coupon <> NEW.coupon THEN 
        INSERT INTO UpdateLog(
            transaction_id, 
            name, 
            value_before,
            value_after, 
            value_difference, 
            currency_before, 
            currency_after,
            revised_time
        ) VALUES(
            NEW.transaction_id,
            'coupon',
            OLD.coupon,
            NEW.coupon,
            NEW.coupon - OLD.coupon,
            OLD.currency,
            NEW.currency, 
            current_timestamp
        );
    END IF;
ELSE 
    IF OLD.received <> NEW.received THEN 
        INSERT INTO UpdateLog(
            transaction_id, 
            name, 
            value_before,
            value_after, 
            currency_before, 
            currency_after,
            revised_time
        ) VALUES(
            NEW.transaction_id,
            'received',
            OLD.received,
            NEW.received,
            OLD.currency,
            NEW.currency, 
            current_timestamp
        );
    END IF;
    IF OLD.expense <> NEW.expense THEN 
        INSERT INTO UpdateLog(
            transaction_id, 
            name, 
            value_before,
            value_after, 
            currency_before, 
            currency_after,
            revised_time
        ) VALUES(
            NEW.transaction_id,
            'expense',
            OLD.expense,
            NEW.expense,
            OLD.currency,
            NEW.currency, 
            current_timestamp
        );
    END IF;
    IF OLD.coupon <> NEW.coupon THEN 
        INSERT INTO UpdateLog(
            transaction_id, 
            name, 
            value_before,
            value_after, 
            currency_before, 
            currency_after,
            revised_time
        ) VALUES(
            NEW.transaction_id,
            'coupon',
            OLD.coupon,
            NEW.coupon,
            OLD.currency,
            NEW.currency, 
            current_timestamp
        );
    END IF;
END IF;
END$$

USE `nmu`$$
CREATE TRIGGER integrateAirSchedule BEFORE INSERT ON AirSchedule 
FOR EACH ROW
BEGIN
SET @at_id = NEW.airticket_tour_id;
SELECT count(*) INTO @days FROM AirSchedule WHERE airticket_tour_id = @at_id;
IF @days = 0 THEN 
    INSERT INTO AirScheduleIntegrated(airticket_tour_id, all_schedule) VALUES 
        (
            @at_id, 
            concat(NEW.depart_airport, ' - ', NEW.arrival_airport, ' ', DATE_FORMAT(NEW.depart_date, '%M/%d'), ' | ')
        );
ELSE 
    SELECT all_schedule FROM AirScheduleIntegrated WHERE airticket_tour_id = @at_id INTO @all_schedule;
    SET @all_schedule = concat(@all_schedule, NEW.depart_airport, ' - ', NEW.arrival_airport, ' ', DATE_FORMAT(NEW.depart_date, '%M/%d'), ' | ');
    UPDATE AirScheduleIntegrated SET all_schedule = @all_schedule WHERE airticket_tour_id = @at_id;
END IF;
END;$$

USE `nmu`$$
CREATE TRIGGER insertWriteOff AFTER INSERT ON GroupTourGuideDetails
FOR EACH ROW
BEGIN
SELECT total_write_off FROM GroupTour WHERE group_tour_id = NEW.group_tour_id INTO @total_write_off;
SELECT total_write_off_currency FROM GroupTour WHERE group_tour_id = NEW.group_tour_id INTO @total_write_off_currency;
SELECT exchange_rate_usd_rmb FROM GroupTour WHERE group_tour_id = NEW.group_tour_id INTO @exchange_rate_usd_rmb;
SET @new_write_off = NEW.write_off;
IF @total_write_off = 0 THEN 
    UPDATE GroupTour SET total_write_off = NEW.write_off, total_write_off_currency = NEW.write_off_currency WHERE group_tour_id = NEW.group_tour_id;
ELSE 
    IF @total_write_off_currency = NEW.write_off_currency THEN 
        UPDATE GroupTour SET total_write_off = total_write_off + NEW.write_off WHERE group_tour_id = NEW.group_tour_id;
    ELSE 
        IF @total_write_off_currency = 'RMB' THEN
            SET @total_write_off = @total_write_off / @exchange_rate_usd_rmb;
        END IF;
        IF NEW.write_off_currency = 'RMB' THEN
            SET @new_write_off = NEW.write_off / @exchange_rate_usd_rmb;
        END IF;
        UPDATE GroupTour SET total_write_off = @total_write_off + @new_write_off, total_write_off_currency = 'USD' WHERE group_tour_id = NEW.group_tour_id;
    END IF;
END IF;
SELECT coupon, coupon_currency, cc_id FROM GroupTour WHERE group_tour_id = NEW.group_tour_id INTO @coupon, @coupon_currency, @cc_id;
IF @cc_id IS NULL AND @coupon = 0 THEN
    UPDATE GroupTour SET coupon_currency = NEW.write_off_currency WHERE group_tour_id = NEW.group_tour_id;
END IF;
END$$

USE `nmu`$$
CREATE TRIGGER insertGroupTourReceived AFTER INSERT ON GroupTourReceived
FOR EACH ROW
BEGIN
SELECT 
    received, 
    received_currency,
    exchange_rate_usd_rmb
FROM GroupTour WHERE group_tour_id = NEW.group_tour_id INTO 
    @received, 
    @received_currency, 
    @exchange_rate_usd_rmb;
SET @new_received = NEW.received;
IF @received = 0 THEN 
    UPDATE GroupTour SET 
        received = NEW.received, 
        received_currency = NEW.received_currency
    WHERE group_tour_id = NEW.group_tour_id;
ELSE 
    IF @received_currency = NEW.received_currency THEN 
        UPDATE GroupTour SET 
            received = received + NEW.received
        WHERE group_tour_id = NEW.group_tour_id;
    ELSE 
        IF @received_currency = 'RMB' THEN
            SET @received = @received / @exchange_rate_usd_rmb;
        END IF;
        IF NEW.received_currency = 'RMB' THEN
            SET @new_received = NEW.received / @exchange_rate_usd_rmb;
        END IF;
        UPDATE GroupTour SET 
            received = @received + @new_received, 
            received_currency = 'USD'
        WHERE group_tour_id = NEW.group_tour_id;
    END IF;
END IF;
SELECT coupon, coupon_currency, cc_id FROM GroupTour WHERE group_tour_id = NEW.group_tour_id INTO @coupon, @coupon_currency, @cc_id;
IF @cc_id IS NULL AND @coupon = 0 THEN
    UPDATE GroupTour SET coupon_currency = NEW.received_currency WHERE group_tour_id = NEW.group_tour_id;
END IF;
END$$


DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
